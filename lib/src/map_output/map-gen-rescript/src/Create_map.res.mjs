// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Leaflet from "leaflet";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Nullable from "@rescript/core/src/Core__Nullable.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function Create_map(props) {
  var nodes = props.nodes;
  var mapRef = React.useRef(null);
  var mapInstanceRef = React.useRef(null);
  React.useEffect((function () {
          var el = mapRef.current;
          if (el === null || el === undefined) {
            console.log("here");
          } else {
            var existingMap = mapInstanceRef.current;
            if (existingMap === null || existingMap === undefined) {
              existingMap === null;
            } else {
              console.log("Cleaning up map instance...");
              existingMap.off("click", (function () {
                      
                    }));
              existingMap.remove();
            }
            var map = Leaflet.map(el, {});
            mapInstanceRef.current = Core__Nullable.fromOption(Caml_option.some(map));
            map.setView([
                  39.3285,
                  -76.62039
                ], 16);
            var layer = Leaflet.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                  maxZoom: 19
                });
            layer.addTo(map);
            var start_node = nodes[0];
            if (start_node !== undefined) {
              var end_node = nodes[nodes.length - 1 | 0];
              if (end_node !== undefined) {
                var start_node_marker = Leaflet.marker([
                      start_node.lat,
                      start_node.lon
                    ]);
                var end_node_marker = Leaflet.marker([
                      end_node.lat,
                      end_node.lon
                    ]);
                start_node_marker.addTo(map);
                end_node_marker.addTo(map);
                var path_points = [];
                nodes.forEach(function (node) {
                      path_points.push([
                            node.lat,
                            node.lon
                          ]);
                    });
                var polylineOptions = {};
                polylineOptions["color"] = "blue";
                polylineOptions["weight"] = 5;
                var path = Leaflet.polyline(path_points);
                path.addTo(map);
                console.log(mapRef);
              } else {
                throw {
                      RE_EXN_ID: "Match_failure",
                      _1: [
                        "Create_map.res",
                        57,
                        12
                      ],
                      Error: new Error()
                    };
              }
            } else {
              throw {
                    RE_EXN_ID: "Match_failure",
                    _1: [
                      "Create_map.res",
                      56,
                      12
                    ],
                    Error: new Error()
                  };
            }
          }
        }), [nodes]);
  return JsxRuntime.jsx("div", {
              ref: Caml_option.some(mapRef),
              style: {
                height: "50vh",
                marginRight: "10%",
                marginLeft: "auto",
                width: "50%"
              }
            });
}

var make = Create_map;

export {
  make ,
}
/* react Not a pure module */
