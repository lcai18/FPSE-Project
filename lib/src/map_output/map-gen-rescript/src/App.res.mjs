// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as RouteForm from "./RouteForm.res.mjs";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Create_map from "./Create_map.res.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var match = React.useState(function () {
        return [];
      });
  var setNodes = match[1];
  var nodes = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setQueried = match$1[1];
  React.useEffect((function () {
          if (nodes.length !== 0) {
            setQueried(function (_prev) {
                  return true;
                });
          }
          
        }), [nodes]);
  var create_map = function (start, destination) {
    var generate_endpoint = function (s, d) {
      return "http://localhost:5432/directions/" + s + "/" + d;
    };
    var endpoint = generate_endpoint(start, destination);
    console.log("Endpoint: " + endpoint);
    Core__Promise.$$catch(fetch(endpoint).then(function (response) {
                return response.json();
              }).then(function (json) {
              var extractList = function (json) {
                return Belt_Option.flatMap(Belt_Option.flatMap(Js_json.decodeObject(json), (function (dict) {
                                  return Js_dict.get(dict, "path");
                                })), Js_json.decodeArray);
              };
              var list = extractList(json);
              if (list !== undefined) {
                var new_nodes = list.map(function (json) {
                      var obj = Js_json.decodeObject(json);
                      if (obj === undefined) {
                        return {
                                id: "",
                                lat: 0.0,
                                lon: 0.0
                              };
                      }
                      var id = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(obj, "id"), Js_json.decodeString), "");
                      var lat = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Js_dict.get(obj, "lat"), Js_json.decodeString), Belt_Float.fromString), 0.0);
                      var lon = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Js_dict.get(obj, "long"), Js_json.decodeString), Belt_Float.fromString), 0.0);
                      return {
                              id: id,
                              lat: lat,
                              lon: lon
                            };
                    });
                console.log(json);
                setNodes(function (_prev) {
                      return new_nodes;
                    });
                console.log("Successfully updated nodes");
              } else {
                console.log("Failed to get list");
              }
              return Promise.resolve(json);
            }), (function (error) {
            console.log("Error:", error);
            return Promise.resolve(null);
          }));
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h1", {
                      children: "OCamaps",
                      style: {
                        color: "#444444",
                        fontSize: "68px",
                        alignItems: "center"
                      }
                    }),
                JsxRuntime.jsx("h2", {
                      children: "@ Johns Hopkins",
                      style: {
                        color: "#444444",
                        fontSize: "20px",
                        fontStyle: "italic"
                      }
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(RouteForm.make, {
                              onSubmit: create_map
                            }),
                        match$1[0] ? JsxRuntime.jsx(Create_map.make, {
                                nodes: nodes
                              }) : JsxRuntime.jsx(JsxRuntime.Fragment, {})
                      ],
                      style: {
                        display: "flex",
                        flexDirection: "row"
                      }
                    })
              ]
            });
}

var make = App;

export {
  make ,
}
/* react Not a pure module */
